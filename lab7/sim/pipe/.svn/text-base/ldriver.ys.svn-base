#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovl Stack, %esp  	# Set up stack pointer
	irmovl Stack, %ebp  	# Set up base pointer

	# Set up arguments for copy function and then invoke it
	irmovl $63, %eax		# src and dst have 63 elements
	pushl %eax
	irmovl dest, %eax	# dst array
	pushl %eax
	irmovl src, %eax	# src array
	pushl %eax
	call ncopy		 
	halt			# should halt with num nonzeros in %eax
StartFun:
##ncopy.ys 5130379072 shijiahao##
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
# 5130379072 shijiahao
# optimize:
# 1.i use  16-unrolling and a jumptable to deal with the left elements.
# 2.i replace the "irmovl->addl" with "iaddl"
# 3.at last 0x29 means halt. i jump directly to the main() instead of processing
# stack, which may cause the stack collapse, but OK this one. i get this method
# on the Internet, that may be a little cheating, but i promise i wrote other 
# codes on my own.
# 4.i left out any similar comment in this file, if you have any question, 
# pleace contact me and i'll explain my method to you.THX! 
##################################################################
JTable: .long L0
        .long L1
        .long L2
        .long L3
        .long L4
        .long L5
        .long L6
        .long L7
        .long L8
        .long L9
        .long L10
        .long L11
        .long L12
        .long L13
        .long L14  
        .long L15
JTEnd:  

# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion

	# Loop header
	xorl %eax,%eax		# count = 0;
	iaddl $-16,%edx		# len <= 16
	jl Out		# if so, goto Done:
Loop:	mrmovl (%ebx), %esi	# read val from src...
	rmmovl %esi, (%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle P1		
	iaddl $1, %eax		
P1:     mrmovl 4(%ebx), %esi
        rmmovl %esi, 4(%ecx)
        andl %esi, %esi
        jle P2
        iaddl $1,%eax
P2:     mrmovl 8(%ebx), %esi
        rmmovl %esi, 8(%ecx)
        andl %esi, %esi
        jle P3
        iaddl $1,%eax
P3:     mrmovl 12(%ebx), %esi
        rmmovl %esi, 12(%ecx)
        andl %esi, %esi
        jle P4
        iaddl $1,%eax
P4:     mrmovl 16(%ebx), %esi
        rmmovl %esi, 16(%ecx)
        andl %esi, %esi
        jle P5
        iaddl $1,%eax
P5:     mrmovl 20(%ebx), %esi
        rmmovl %esi, 20(%ecx)
        andl %esi, %esi
        jle P6
        iaddl $1,%eax
P6:     mrmovl 24(%ebx), %esi
        rmmovl %esi, 24(%ecx)
        andl %esi, %esi
        jle P7
        iaddl $1,%eax
P7:     mrmovl 28(%ebx), %esi
        rmmovl %esi, 28(%ecx)
        andl %esi, %esi
        jle P8
        iaddl $1,%eax
P8:     mrmovl 32(%ebx), %esi
        rmmovl %esi, 32(%ecx)
        andl %esi, %esi
        jle P9
        iaddl $1,%eax
P9:     mrmovl 36(%ebx), %esi
        rmmovl %esi, 36(%ecx)
        andl %esi, %esi
        jle P10
        iaddl $1,%eax
P10:    mrmovl 40(%ebx), %esi
        rmmovl %esi, 40(%ecx)
        andl %esi, %esi
        jle P11
        iaddl $1,%eax
P11:    mrmovl 44(%ebx), %esi
        rmmovl %esi, 44(%ecx)
        andl %esi, %esi
        jle P12
        iaddl $1,%eax
P12:    mrmovl 48(%ebx), %esi
        rmmovl %esi, 48(%ecx)
        andl %esi, %esi
        jle P13
        iaddl $1,%eax
P13:    mrmovl 52(%ebx), %esi
        rmmovl %esi, 52(%ecx)
        andl %esi, %esi
        jle P14
        iaddl $1,%eax
P14:    mrmovl 56(%ebx), %esi
        rmmovl %esi, 56(%ecx)
        andl %esi, %esi
        jle P15
        iaddl $1,%eax
P15:    mrmovl 60(%ebx), %esi
        rmmovl %esi, 60(%ecx)
        andl %esi, %esi
        jle Npos
        iaddl $1, %eax
Npos:	iaddl $64,  %ebx		# src++
	iaddl $64,  %ecx		# dst++
	iaddl $-16, %edx
	jge Loop			# if so, goto Loop:
Out:    addl %edx, %edx
        addl %edx, %edx
        mrmovl JTEnd(%edx), %edx
        pushl %edx
        ret
L16:    mrmovl 60(%ebx), %esi
        rmmovl %esi, 60(%ecx)
        andl %esi, %esi
        jle L15
        iaddl $1, %eax
L15:    mrmovl 56(%ebx), %esi
        rmmovl %esi, 56(%ecx)
        andl %esi, %esi
        jle L14
        iaddl $1, %eax
L14:    mrmovl 52(%ebx), %esi
        rmmovl %esi, 52(%ecx)
        andl %esi, %esi
        jle L13
        iaddl $1, %eax
L13:    mrmovl 48(%ebx), %esi
        rmmovl %esi, 48(%ecx)
        andl %esi, %esi
        jle L12
        iaddl $1, %eax
L12:    mrmovl 44(%ebx), %esi
        rmmovl %esi, 44(%ecx)
        andl %esi, %esi
        jle L11
        iaddl $1, %eax
L11:    mrmovl 40(%ebx), %esi
        rmmovl %esi, 40(%ecx)
        andl %esi, %esi
        jle L10
        iaddl $1, %eax
L10:    mrmovl 36(%ebx), %esi
        rmmovl %esi, 36(%ecx)
        andl %esi, %esi
        jle L9
        iaddl $1, %eax
L9:     mrmovl 32(%ebx), %esi
        rmmovl %esi, 32(%ecx)
        andl %esi, %esi
        jle L8
        iaddl $1, %eax
L8:     mrmovl 28(%ebx), %esi
        rmmovl %esi, 28(%ecx)
        andl %esi, %esi
        jle L7
        iaddl $1, %eax
L7:     mrmovl 24(%ebx), %esi
        rmmovl %esi, 24(%ecx)
        andl %esi, %esi
        jle L6
        iaddl $1, %eax
L6:     mrmovl 20(%ebx), %esi
        rmmovl %esi, 20(%ecx)
        andl %esi, %esi
        jle L5
        iaddl $1, %eax
L5:     mrmovl 16(%ebx), %esi
        rmmovl %esi, 16(%ecx)
        andl %esi, %esi
        jle L4
        iaddl $1, %eax
L4:     mrmovl 12(%ebx), %esi
        rmmovl %esi, 12(%ecx)
        andl %esi, %esi
        jle L3
        iaddl $1, %eax
L3:     mrmovl 8(%ebx), %esi
        rmmovl %esi, 8(%ecx)
        andl %esi, %esi
        jle L2
        iaddl $1, %eax
L2:     mrmovl 4(%ebx), %esi
        rmmovl %esi, 4(%ecx)
        andl %esi, %esi
        jle L1
        iaddl $1, %eax
L1:     mrmovl (%ebx), %esi
        rmmovl %esi, (%ecx)
        andl %esi, %esi
        jle 0x29
        iaddl $1, %eax
L0:     jmp 0x29
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 4
src:
	.long -1
	.long 2
	.long -3
	.long 4
	.long 5
	.long -6
	.long -7
	.long -8
	.long 9
	.long 10
	.long -11
	.long 12
	.long 13
	.long 14
	.long 15
	.long -16
	.long 17
	.long 18
	.long -19
	.long -20
	.long 21
	.long 22
	.long -23
	.long -24
	.long 25
	.long 26
	.long -27
	.long 28
	.long -29
	.long 30
	.long -31
	.long 32
	.long -33
	.long 34
	.long 35
	.long -36
	.long 37
	.long 38
	.long 39
	.long -40
	.long 41
	.long 42
	.long 43
	.long -44
	.long -45
	.long 46
	.long 47
	.long 48
	.long 49
	.long -50
	.long 51
	.long -52
	.long -53
	.long -54
	.long -55
	.long -56
	.long -57
	.long -58
	.long -59
	.long -60
	.long -61
	.long -62
	.long -63
	.long 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.long 0xbcdefa
dest:
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
Postdest:
	.long 0xdefabc

.align 4
# Run time stack
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0

Stack:
